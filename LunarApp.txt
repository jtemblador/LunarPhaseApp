LunarApp

Credentials:
Application Id ----- 66251a8b-53ce-4143-8b05-f04009bae7f0
Application Secret - 83dd17cad187893565c90b61fc994c6868ba06736ba6f0b59111d007a7d7f01c766519f6306f0cd641c7c504309bcd9b9b96f32c412c840bc7d19c7c34d1c434da41d24a87e31d5452101d7344fa096d1756fe2effcfa226aef21ee4f642bf12b84152b9062c3eb9cacb9f80a60c5776

I'll create a detailed prompt for an AI to build a lunar visualization program based on user location. Here's a comprehensive prompt that covers the technical requirements, file structure, and implementation steps:

# Lunar Observer: Moon Phase Visualization Tool

Create a Python-based application that provides real-time lunar data and generates a 3D visualization of the moon as it appears from any location on Earth. The program should display accurate lunar phase, cycle information, angle, distance, illumination, and other relevant lunar data based on the user's location.

## Technical Requirements

1. The application should use astronomical APIs to gather accurate lunar data
2. It must render a photorealistic 3D model of the moon with proper lighting conditions
3. The visualization must accurately reflect how the moon appears from different locations
4. Users should be able to input any location on Earth (default: Los Angeles)
5. The application should have a clean, intuitive interface
6. All data should update in real-time when location changes

## Project Structure
The project should follow this structure:
```
lunar_observer/
├── README.md                   # Documentation and setup instructions
├── requirements.txt            # Python dependencies
├── main.py                     # Application entry point
├── config.py                   # Configuration settings and API keys
├── backend/
│   ├── __init__.py
│   ├── lunar_data.py           # API integration for lunar data
│   ├── location_service.py     # Geocoding and location processing
│   └── data_processor.py       # Transformation of API data to app format
├── frontend/
│   ├── static/
│   │   ├── css/
│   │   │   └── styles.css      # Application styling
│   │   ├── js/
│   │   │   ├── main.js         # Core frontend logic
│   │   │   ├── renderer.js     # 3D rendering with Three.js
│   │   │   └── controls.js     # User interface controls
│   │   └── assets/
│   │       ├── textures/       # Moon textures
│   │       └── icons/          # UI icons
│   └── templates/
│       └── index.html          # Main application template
└── tests/
    ├── __init__.py
    ├── test_lunar_data.py      # Tests for lunar data fetching
    ├── test_rendering.py       # Tests for 3D rendering
    └── test_location.py        # Tests for location services
```

## Technology Stack
- **Backend**: Python 3.9+ with FastAPI for the API server
- **Frontend**: HTML5, CSS3, JavaScript
- **3D Rendering**: Three.js for WebGL-based moon visualization
- **Data Processing**: NumPy and Astropy for astronomical calculations
- **APIs**: NASA APIs, Astronomy API, or similar for lunar data
- **Location Services**: Geopy for geocoding and location management
- **Testing**: Pytest for unit and integration tests

## Implementation Steps

### Step 1: Set Up Project Structure and Dependencies
1. Create the basic directory structure as outlined above
2. Set up a Python virtual environment
3. Install required Python packages (requests, fastapi, numpy, astropy, geopy)
4. Initialize a basic FastAPI application in `main.py`
5. Create a configuration file with placeholder API keys

At this point, you should have a working FastAPI server that runs but doesn't yet provide any lunar data.

### Step 2: Implement Lunar Data Retrieval
1. Register for required astronomy APIs (NASA, Astronomy API, etc.)
2. Implement `lunar_data.py` to fetch current lunar data including:
   - Current lunar phase (percentage illumination)
   - Lunar cycle information (days since new moon)
   - Angular size
   - Distance from Earth
   - Position in sky (azimuth and altitude)
3. Create basic endpoints in FastAPI to provide this data
4. Test API calls to ensure proper data retrieval

After completing this step, your application should be able to fetch and return lunar data via API endpoints.

### Step 3: Location Processing
1. Implement `location_service.py` to handle geographic coordinates
2. Add geocoding to convert city names to latitude/longitude
3. Create endpoints for submitting and storing location data
4. Implement logic to adjust lunar calculations based on observer location
5. Add validation for location inputs

Now your application should accept location input and adjust lunar calculations accordingly.

### Step 4: Create Basic Frontend
1. Design and implement the HTML structure in `index.html`
2. Add CSS styling for a clean, modern UI
3. Implement basic JavaScript to fetch and display lunar data
4. Create a location input form with validation
5. Add event listeners to update data when location changes

At this stage, you should have a functional UI that displays lunar data for a given location.

### Step 5: Implement 3D Moon Visualization
1. Set up Three.js in the frontend
2. Create a basic spherical moon model
3. Apply high-resolution moon textures
4. Implement proper lighting to show the current phase
5. Add camera controls for user interaction
6. Sync the 3D model with retrieved lunar data

The application should now display a basic 3D visualization of the moon that updates with location changes.

### Step 6: Enhance Visualization Accuracy
1. Refine the moon's position calculation to match real-world observations
2. Implement proper shadowing based on sun-moon-earth geometry
3. Add accurate rotation and libration effects
4. Adjust the moon's apparent size based on its actual distance
5. Implement the correct viewing angle based on user location
6. Add a starfield background for context

Your visualization should now closely match what an observer would see from their location.

### Step 7: Add Additional Features
1. Implement a time selection feature to view the moon at different dates/times
2. Add lunar feature identification (mare, craters, etc.)
3. Include additional lunar data (rise/set times, next eclipse, etc.)
4. Create an option to compare views from different locations
5. Add the ability to export or share visualizations

At this point, you'll have a comprehensive lunar observation tool with multiple useful features.

### Step 8: Optimize and Polish
1. Optimize 3D rendering for performance on various devices
2. Implement responsive design for mobile compatibility
3. Add loading indicators for API calls and rendering
4. Create helpful tooltips and user guidance
5. Refine the UI/UX for intuitive use
6. Add error handling and user feedback mechanisms

Your application should now be polished, responsive, and user-friendly.

### Step 9: Testing and Documentation
1. Implement comprehensive tests for all major components
2. Verify accuracy of lunar data against established sources
3. Test the application across different browsers and devices
4. Create detailed documentation for setup and usage
5. Add comments throughout the code for maintainability

## Key Technical Challenges to Address

### Accurate Lunar Positioning
The position of the moon as seen from Earth varies based on observer location. The application must correctly calculate:

1. The altitude and azimuth of the moon from the observer's position
2. The correct orientation of the moon's features as seen from that location
3. Adjustments for atmospheric refraction near the horizon

### Real-Time 3D Rendering
The Three.js implementation needs to handle:

1. Accurate lighting to show the current phase
2. Proper rotation of the moon model based on the observer's location
3. Realistic texturing including albedo, normal maps, and displacement maps
4. Efficient rendering for smooth performance

### Astronomical Calculations
The backend must implement several complex astronomical calculations:

1. Conversion between different coordinate systems (ecliptic, equatorial, horizontal)
2. Accurate phase angle calculations based on sun-moon-earth geometry
3. Libration effects that slightly change which parts of the moon are visible
4. Distance calculations that affect the apparent size

## API Integration Example

For the lunar data API integration, use the Astronomy API or similar service. Here's an example of how to structure the lunar data retrieval in Python:

```python
import requests
from datetime import datetime
from geopy.geocoders import Nominatim

class LunarDataService:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.astronomyapi.com/api/v2/"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}"
        }
        
    def get_moon_data(self, latitude, longitude, date=None):
        """
        Get comprehensive moon data for a specific location and time
        
        Args:
            latitude (float): Observer latitude
            longitude (float): Observer longitude
            date (datetime, optional): Observation time. Defaults to current time.
            
        Returns:
            dict: Moon data including phase, distance, illumination, etc.
        """
        if date is None:
            date = datetime.now()
            
        formatted_date = date.strftime("%Y-%m-%d")
        
        # Request body for the API
        body = {
            "format": "json",
            "observer": {
                "latitude": latitude,
                "longitude": longitude,
                "date": formatted_date
            },
            "body": "moon"
        }
        
        # Make the API request
        response = requests.post(
            f"{self.base_url}bodies/positions",
            headers=self.headers,
            json=body
        )
        
        if response.status_code != 200:
            raise Exception(f"API request failed: {response.status_code}")
            
        data = response.json()
        
        # Extract and process the relevant moon data
        moon_data = data["data"]["table"]["rows"][0]["cells"]
        
        # Get additional phase information
        phase_data = self._get_moon_phase(formatted_date)
        
        # Combine and process all data
        result = {
            "phase": phase_data["phase"]["name"],
            "illumination": phase_data["phase"]["illumination"] * 100,  # Convert to percentage
            "phase_angle": moon_data["phase"]["phaseAngle"],
            "distance": {
                "km": moon_data["distance"]["fromEarth"]["km"],
                "au": moon_data["distance"]["fromEarth"]["au"]
            },
            "position": {
                "altitude": moon_data["position"]["horizontal"]["altitude"]["degrees"],
                "azimuth": moon_data["position"]["horizontal"]["azimuth"]["degrees"],
                "right_ascension": moon_data["position"]["equatorial"]["rightAscension"]["hours"],
                "declination": moon_data["position"]["equatorial"]["declination"]["degrees"]
            },
            "angular_diameter": moon_data["apparentDiameter"]["degrees"]
        }
        
        return result
    
    def _get_moon_phase(self, date):
        """Get detailed moon phase information"""
        response = requests.get(
            f"{self.base_url}moon/phase",
            headers=self.headers,
            params={"date": date}
        )
        
        if response.status_code != 200:
            raise Exception(f"Phase API request failed: {response.status_code}")
            
        return response.json()["data"]
        
    @staticmethod
    def get_coordinates_from_location(location_name):
        """Convert a location name to coordinates"""
        geolocator = Nominatim(user_agent="lunar_observer")
        location = geolocator.geocode(location_name)
        
        if location is None:
            raise ValueError(f"Location not found: {location_name}")
            
        return {
            "latitude": location.latitude,
            "longitude": location.longitude,
            "address": location.address
        }
```

## 3D Rendering Implementation

For the 3D visualization, use Three.js with detailed moon textures. Here's a conceptual implementation for the renderer:

```javascript
class MoonRenderer {
    constructor(containerElement) {
        this.container = containerElement;
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        
        this.moonRadius = 1.0;
        this.moonMesh = null;
        this.starField = null;
        
        this.initRenderer();
        this.loadTextures();
        this.setupLighting();
        this.createStarField();
        this.setupControls();
        
        window.addEventListener('resize', this.onWindowResize.bind(this));
    }
    
    initRenderer() {
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.container.appendChild(this.renderer.domElement);
        
        // Position camera
        this.camera.position.z = 5;
    }
    
    loadTextures() {
        const textureLoader = new THREE.TextureLoader();
        
        // Load high-resolution moon textures
        const diffuseMap = textureLoader.load('/static/assets/textures/moon_diffuse.jpg');
        const normalMap = textureLoader.load('/static/assets/textures/moon_normal.jpg');
        const displacementMap = textureLoader.load('/static/assets/textures/moon_displacement.jpg');
        
        // Create moon material with proper shading
        const moonMaterial = new THREE.MeshPhongMaterial({
            map: diffuseMap,
            normalMap: normalMap,
            displacementMap: displacementMap,
            displacementScale: 0.06,
            shininess: 5
        });
        
        // Create moon geometry with high detail
        const moonGeometry = new THREE.SphereGeometry(this.moonRadius, 64, 64);
        
        // Create the moon mesh and add to scene
        this.moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);
        this.scene.add(this.moonMesh);
    }
    
    setupLighting() {
        // Ambient light for base illumination
        const ambientLight = new THREE.AmbientLight(0x222222);
        this.scene.add(ambientLight);
        
        // Directional light to simulate sunlight
        this.sunLight = new THREE.DirectionalLight(0xffffff, 1);
        this.sunLight.position.set(5, 0, 0);
        this.scene.add(this.sunLight);
    }
    
    createStarField() {
        const starGeometry = new THREE.BufferGeometry();
        const starMaterial = new THREE.PointsMaterial({
            color: 0xffffff,
            size: 0.05,
            transparent: true
        });
        
        // Create 1000 random stars
        const starVertices = [];
        for (let i = 0; i < 1000; i++) {
            const x = THREE.MathUtils.randFloatSpread(100);
            const y = THREE.MathUtils.randFloatSpread(100);
            const z = THREE.MathUtils.randFloatSpread(100);
            starVertices.push(x, y, z);
        }
        
        starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
        this.starField = new THREE.Points(starGeometry, starMaterial);
        this.scene.add(this.starField);
    }
    
    setupControls() {
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.rotateSpeed = 0.5;
    }
    
    updateMoonPhase(illumination, phaseAngle) {
        // Convert illumination percentage to radians
        const phaseRad = (phaseAngle * Math.PI) / 180;
        
        // Update sun position to create proper shadow on moon
        this.sunLight.position.x = 5 * Math.cos(phaseRad);
        this.sunLight.position.z = 5 * Math.sin(phaseRad);
    }
    
    updateMoonPosition(altitude, azimuth) {
        // Convert from degrees to radians
        const altRad = (altitude * Math.PI) / 180;
        const azRad = (azimuth * Math.PI) / 180;
        
        // Reset moon rotation
        this.moonMesh.rotation.set(0, 0, 0);
        
        // Apply rotation based on the moon's position in sky
        this.moonMesh.rotateY(azRad);
        this.moonMesh.rotateX(altRad);
    }
    
    updateMoonDistance(angularDiameter) {
        // Convert angular diameter to a scale factor
        // Reference: Moon's average angular diameter is 0.5 degrees
        const scaleFactor = angularDiameter / 0.5;
        
        // Update moon size based on distance
        this.moonMesh.scale.set(scaleFactor, scaleFactor, scaleFactor);
    }
    
    onWindowResize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
    
    animate() {
        requestAnimationFrame(this.animate.bind(this));
        
        this.controls.update();
        this.renderer.render(this.scene, this.camera);
    }
    
    updateFromLocation(lunarData) {
        // Update all moon properties based on the new lunar data
        this.updateMoonPhase(lunarData.illumination, lunarData.phase_angle);
        this.updateMoonPosition(lunarData.position.altitude, lunarData.position.azimuth);
        this.updateMoonDistance(lunarData.angular_diameter);
    }
}
```

## Frontend Integration

The main application JavaScript file should connect the backend API with the 3D visualization:

```javascript
document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const locationForm = document.getElementById('location-form');
    const locationInput = document.getElementById('location-input');
    const moonContainer = document.getElementById('moon-container');
    const moonDataContainer = document.getElementById('moon-data');
    
    // Initialize the moon renderer
    const moonRenderer = new MoonRenderer(moonContainer);
    moonRenderer.animate();
    
    // Initial location (Los Angeles)
    let currentLocation = "Los Angeles, CA";
    updateMoonData(currentLocation);
    
    // Handle location form submission
    locationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const newLocation = locationInput.value.trim();
        if (newLocation) {
            currentLocation = newLocation;
            updateMoonData(currentLocation);
        }
    });
    
    // Function to fetch moon data from backend API
    async function updateMoonData(location) {
        try {
            showLoadingIndicator();
            
            const response = await fetch(`/api/moon-data?location=${encodeURIComponent(location)}`);
            
            if (!response.ok) {
                throw new Error(`Error: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Update the UI with lunar data
            updateLunarDataDisplay(data);
            
            // Update the 3D moon visualization
            moonRenderer.updateFromLocation(data);
            
            hideLoadingIndicator();
        } catch (error) {
            console.error('Failed to fetch moon data:', error);
            showError(`Failed to get data for location: ${error.message}`);
            hideLoadingIndicator();
        }
    }
    
    // Update the lunar data display
    function updateLunarDataDisplay(data) {
        // Create HTML content for lunar data
        const lunarDataHTML = `
            <div class="data-card">
                <h3>Moon Phase</h3>
                <p class="data-value">${data.phase}</p>
                <p class="data-detail">${data.illumination.toFixed(1)}% illuminated</p>
            </div>
            
            <div class="data-card">
                <h3>Distance</h3>
                <p class="data-value">${Math.round(data.distance.km).toLocaleString()} km</p>
                <p class="data-detail">${data.distance.au.toFixed(6)} AU</p>
            </div>
            
            <div class="data-card">
                <h3>Position</h3>
                <p class="data-value">Alt: ${data.position.altitude.toFixed(1)}°</p>
                <p class="data-detail">Az: ${data.position.azimuth.toFixed(1)}°</p>
            </div>
            
            <div class="data-card">
                <h3>Angular Size</h3>
                <p class="data-value">${data.angular_diameter.toFixed(4)}°</p>
            </div>
        `;
        
        moonDataContainer.innerHTML = lunarDataHTML;
    }
    
    // UI helper functions
    function showLoadingIndicator() {
        // Implementation to show loading state
    }
    
    function hideLoadingIndicator() {
        // Implementation to hide loading state
    }
    
    function showError(message) {
        // Implementation to show error message
    }
});
```

## Final Steps

1. Ensure all API keys and credentials are properly secured
2. Implement caching for lunar data to reduce API calls
3. Add comprehensive error handling throughout the application
4. Create a detailed README with setup instructions
5. Add license information and attribution for any third-party resources

This comprehensive lunar visualization tool will provide users with an accurate view of the moon exactly as it appears from their chosen location, along with detailed astronomical data about our nearest celestial neighbor.
